a_1=comps[[1]][row, "a_1"],
a_1p=comps[[2]][row, "a_1"],
a_2r=comps[[1]][row, "a_2r"],
a_2rp=comps[[2]][row, "a_2r"],
a_2nr=comps[[1]][row, "a_2nr"],
a_2nrp=comps[[2]][row, "a_2nr"]))
}
comp_type <- paste0("E[Y_", measured_t, "]")
} else if (test_type=="AUC") {
for (row in (1:nrow(comps[[1]]))) {
temp_out <- rbind(temp_out,
Create_Individual_Contrast_Row_AUC(driver_parms=driver_parms,
model_fit_params=model_fit_params,
t_0=t_0,
crit_t=crit_t,
t_max=t_max,
a_1=comps[[1]][row, "a_1"],
a_1p=comps[[2]][row, "a_1"],
a_2r=comps[[1]][row, "a_2r"],
a_2rp=comps[[2]][row, "a_2r"],
a_2nr=comps[[1]][row, "a_2nr"],
a_2nrp=comps[[2]][row, "a_2nr"]))
}
comp_type <- "AUC"
} else if (test_type %in% c("A1", "A2", "Int")) {
temp_out <- Create_Individual_Contrast_Row_Proto_ME(driver_parms=driver_parms,
model_fit_params=model_fit_params,
crit_t=crit_t,
t_max=t_max,
test_type=test_type)
comp_type <- test_type
}
temp_out$zero <- 0
if (test_type %in% c("single_t", "AUC")) {
if (driver_parms[["SMART_structure"]]=="prototypical") {
label_out <- data.frame(type=comp_type,
comparison=paste0("(", comps[[1]][, "a_1"], ",",
comps[[1]][, "a_2nr"],
") vs (",
comps[[2]][, "a_1"], ",",
comps[[2]][, "a_2nr"], ")"))
}
} else if (test_type %in% c("A1", "A2", "Int")) {
label_out <- data.frame(type=comp_type,
comparison=c("Main Effect"))
}
Output <- list(contrast_mat=temp_out, labels=label_out)
return(Output)
}
Create_Contrast_Mat(driver_parms=test_driver_parms, model_fit_params=test_iter_output,
test_type="AUC", crit_t=1,
t_0=0, t_max=2,
measured_t=2, comps=NULL)
# Create a Contrast Matrix for Input into hypothesis_testing() Function
### driver_parms = Output of Process_Driver_Row_Main() function
### model_fit_params = summary_paras output of solve_SMART_Multilayer() function
### test_type = The outcome to test
###             Potential options: "single_t" = Single time point
###                                   (Must input measured_t)
###                                "AUC" = Area Under Curve
###                                   (Must input t_0, t_max)
###                                "A1" = Main Effect A1
###                                "A2" = Main Effect A2
###                                "Int" = A1/A2 interaction
### t_0 = First time point
### crit_t = Critical t value (time of second decision). Default is 1
### t_max = Maximum time point
### comps = Which comparisons to run - Defaults to all 6 pairwise comparisons
###         Must be formatted as a list of two dataframes (with same number of rows)
###           Two columns in each dataframe (Correspond to (A1,A2))
###           We then run comparisons of DTR_1 vs DTR_2 with the rows of
###           comps[[1]] defining DTR_1 and the rows of comps[[2]] defining DTR_2.
###           E.g. If comps[[1]][i,]=[1,1], comps[[2]][i,]=[-1,1], then the ith
###           comparison we'd make is (1,1) vs (-1,1) (Y(1,1)-Y(-1,1))
#### Returns list:
####    [["contrast_mat"]] = Contrast matrix for direct input to hypothesis_testing()
####    [["labels"]] = Dataframe of labels to append to hypothesis_testing() output
Create_Contrast_Mat <- function(driver_parms, model_fit_params,
test_type, crit_t,
t_0=NULL, t_max=NULL,
measured_t=NULL, comps=NULL) {
# Default to all comparisons
if (is.null(comps)) {
comps <- list(data.frame(), data.frame())
SMART_structure_df <- Define_SMART_Pathways(driver_parms[["SMART_structure"]])
for (i in (1:(nrow(SMART_structure_df)-1))) {
for (ii in ((i+1):nrow(SMART_structure_df))) {
comps[[1]] <- rbind(comps[[1]], data.frame(a_1=SMART_structure_df[i,"a_1"],
a_2r=SMART_structure_df[i,"a_2r"],
a_2nr=SMART_structure_df[i,"a_2nr"]))
comps[[2]] <- rbind(comps[[2]], data.frame(a_1=SMART_structure_df[ii,"a_1"],
a_2r=SMART_structure_df[ii,"a_2r"],
a_2nr=SMART_structure_df[ii,"a_2nr"]))
}
}
}
temp_out <- data.frame()
if (test_type=="single_t") {
for (row in (1:nrow(comps[[1]]))) {
temp_out <- rbind(temp_out,
Create_Individual_Contrast_Row_Single_t(driver_parms=driver_parms,
model_fit_params=model_fit_params,
t=measured_t,
crit_t=crit_t,
a_1=comps[[1]][row, "a_1"],
a_1p=comps[[2]][row, "a_1"],
a_2r=comps[[1]][row, "a_2r"],
a_2rp=comps[[2]][row, "a_2r"],
a_2nr=comps[[1]][row, "a_2nr"],
a_2nrp=comps[[2]][row, "a_2nr"]))
}
comp_type <- paste0("E[Y_", measured_t, "]")
} else if (test_type=="AUC") {
for (row in (1:nrow(comps[[1]]))) {
temp_out <- rbind(temp_out,
Create_Individual_Contrast_Row_AUC(driver_parms=driver_parms,
model_fit_params=model_fit_params,
t_0=t_0,
crit_t=crit_t,
t_max=t_max,
a_1=comps[[1]][row, "a_1"],
a_1p=comps[[2]][row, "a_1"],
a_2r=comps[[1]][row, "a_2r"],
a_2rp=comps[[2]][row, "a_2r"],
a_2nr=comps[[1]][row, "a_2nr"],
a_2nrp=comps[[2]][row, "a_2nr"]))
}
comp_type <- "AUC"
} else if (test_type %in% c("A1", "A2", "Int")) {
temp_out <- Create_Individual_Contrast_Row_Proto_ME(driver_parms=driver_parms,
model_fit_params=model_fit_params,
crit_t=crit_t,
t_max=t_max,
test_type=test_type)
comp_type <- test_type
}
temp_out$zero <- 0
if (test_type %in% c("single_t", "AUC")) {
if (driver_parms[["SMART_structure"]]=="prototypical") {
label_out <- data.frame(type=comp_type,
comparison=paste0("(", comps[[1]][, "a_1"], ",",
comps[[1]][, "a_2nr"],
") vs (",
comps[[2]][, "a_1"], ",",
comps[[2]][, "a_2nr"], ")"))
}
} else if (test_type %in% c("A1", "A2", "Int")) {
label_out <- data.frame(type=comp_type,
comparison=c("Main Effect"))
}
Output <- list(contrast_mat=temp_out, labels=label_out)
return(Output)
}
Create_Contrast_Mat(driver_parms=test_driver_parms, model_fit_params=test_iter_output,
test_type="single_t", crit_t=1,
t_0=0, t_max=2,
measured_t=2, comps=NULL)
# Create a Contrast Matrix for Input into hypothesis_testing() Function
### driver_parms = Output of Process_Driver_Row_Main() function
### model_fit_params = summary_paras output of solve_SMART_Multilayer() function
### test_type = The outcome to test
###             Potential options: "single_t" = Single time point
###                                   (Must input measured_t)
###                                "AUC" = Area Under Curve
###                                   (Must input t_0, t_max)
###                                "A1" = Main Effect A1
###                                "A2" = Main Effect A2
###                                "Int" = A1/A2 interaction
### t_0 = First time point
### crit_t = Critical t value (time of second decision). Default is 1
### t_max = Maximum time point
### comps = Which comparisons to run - Defaults to all 6 pairwise comparisons
###         Must be formatted as a list of two dataframes (with same number of rows)
###           Two columns in each dataframe (Correspond to (A1,A2))
###           We then run comparisons of DTR_1 vs DTR_2 with the rows of
###           comps[[1]] defining DTR_1 and the rows of comps[[2]] defining DTR_2.
###           E.g. If comps[[1]][i,]=[1,1], comps[[2]][i,]=[-1,1], then the ith
###           comparison we'd make is (1,1) vs (-1,1) (Y(1,1)-Y(-1,1))
#### Returns list:
####    [["contrast_mat"]] = Contrast matrix for direct input to hypothesis_testing()
####    [["labels"]] = Dataframe of labels to append to hypothesis_testing() output
Create_Contrast_Mat <- function(driver_parms, model_fit_params,
test_type, crit_t,
t_0=NULL, t_max=NULL,
measured_t=NULL, comps=NULL) {
# Default to all comparisons
if (is.null(comps)) {
comps <- list(data.frame(), data.frame())
SMART_structure_df <- Define_SMART_Pathways(driver_parms[["SMART_structure"]])
for (i in (1:(nrow(SMART_structure_df)-1))) {
for (ii in ((i+1):nrow(SMART_structure_df))) {
comps[[1]] <- rbind(comps[[1]], data.frame(a_1=SMART_structure_df[i,"a_1"],
a_2r=SMART_structure_df[i,"a_2r"],
a_2nr=SMART_structure_df[i,"a_2nr"]))
comps[[2]] <- rbind(comps[[2]], data.frame(a_1=SMART_structure_df[ii,"a_1"],
a_2r=SMART_structure_df[ii,"a_2r"],
a_2nr=SMART_structure_df[ii,"a_2nr"]))
}
}
}
temp_out <- data.frame()
if (test_type=="single_t") {
for (row in (1:nrow(comps[[1]]))) {
temp_out <- rbind(temp_out,
Create_Individual_Contrast_Row_Single_t(driver_parms=driver_parms,
model_fit_params=model_fit_params,
t=measured_t,
crit_t=crit_t,
a_1=comps[[1]][row, "a_1"],
a_1p=comps[[2]][row, "a_1"],
a_2r=comps[[1]][row, "a_2r"],
a_2rp=comps[[2]][row, "a_2r"],
a_2nr=comps[[1]][row, "a_2nr"],
a_2nrp=comps[[2]][row, "a_2nr"]))
}
comp_type <- paste0("E[Y_", measured_t, "]")
} else if (test_type=="AUC") {
for (row in (1:nrow(comps[[1]]))) {
temp_out <- rbind(temp_out,
Create_Individual_Contrast_Row_AUC(driver_parms=driver_parms,
model_fit_params=model_fit_params,
t_0=t_0,
crit_t=crit_t,
t_max=t_max,
a_1=comps[[1]][row, "a_1"],
a_1p=comps[[2]][row, "a_1"],
a_2r=comps[[1]][row, "a_2r"],
a_2rp=comps[[2]][row, "a_2r"],
a_2nr=comps[[1]][row, "a_2nr"],
a_2nrp=comps[[2]][row, "a_2nr"]))
}
comp_type <- "AUC"
} else if (test_type %in% c("A1", "A2", "Int")) {
temp_out <- Create_Individual_Contrast_Row_Proto_ME(driver_parms=driver_parms,
model_fit_params=model_fit_params,
crit_t=crit_t,
t_max=t_max,
test_type=test_type)
comp_type <- test_type
}
temp_out$zero <- 0
if (test_type %in% c("single_t", "AUC")) {
if (driver_parms[["SMART_structure"]]=="prototypical") {
label_out <- data.frame(type=comp_type,
comparison=paste0("(", comps[[1]][, "a_1"], ",",
comps[[1]][, "a_2nr"],
") vs (",
comps[[2]][, "a_1"], ",",
comps[[2]][, "a_2nr"], ")"))
}
} else if (test_type %in% c("A1", "A2", "Int")) {
label_out <- data.frame(type=comp_type,
comparison=c("Main Effect"))
}
Output <- list(contrast_mat=temp_out, labels=label_out)
return(Output)
}
test_contrasts <- Define_All_Contrasts(driver_parms=test_driver_parms,
model_fit_params=test_iter_output,
test_types=c("single_t", "AUC"),
t_0=0,
crit_t=1,
t_max=2, comps=NULL)
# Define All Contrasts for Analysis
### driver_parms = Output of Process_Driver_Row_Main() function
### model_fit_params = summary_paras output of solve_SMART_Multilayer() function
### test_types = The outcomes to test
###              Potential options: "single_t" = End of Study
###                                "AUC" = Area Under Curve
###                                   (Must input t_0, t_max)
###                                "A1" = Main Effect A1
###                                "A2" = Main Effect A2
###                                "Int" = A1/A2 interaction
### t_0 = First time point
### crit_t = Critical t value (time of second decision). Default is 1
### t_max = Maximum time point
### comps = Which comparisons to run - Defaults to all 6 pairwise comparisons
###         Must be formatted as a list of two dataframes (with same number of rows)
###           Two columns in each dataframe (Correspond to (A1,A2))
###           We then run comparisons of DTR_1 vs DTR_2 with the rows of
###           comps[[1]] defining DTR_1 and the rows of comps[[2]] defining DTR_2.
###           E.g. If comps[[1]][i,]=[1,1], comps[[2]][i,]=[-1,1], then the ith
###           comparison we'd make is (1,1) vs (-1,1) (Y(1,1)-Y(-1,1))
#### Returns list of lists (outer list indexed by outcome):
####    [["contrast_mat"]] = Contrast matrix for direct input to hypothesis_testing()
####    [["labels"]] = Dataframe of labels to append to hypothesis_testing() output
Define_All_Contrasts <- function(driver_parms, model_fit_params, test_types,
t_0, crit_t, t_max, comps=NULL) {
temp_output <- NULL
for (test_type in test_types) {
temp_output[[outcome]] <- Create_Contrast_Mat(driver_parms=driver_parms,
model_fit_params=model_fit_params,
test_type=test_type, crit_t=1,
t_0=t_0,
t_max=2,
measured_t=t_max,
comps=comps)
}
Output <- temp_output
return(Output)
}
test_contrasts <- Define_All_Contrasts(driver_parms=test_driver_parms,
model_fit_params=test_iter_output,
test_types=c("single_t", "AUC"),
t_0=0,
crit_t=1,
t_max=2, comps=NULL)
# Define All Contrasts for Analysis
### driver_parms = Output of Process_Driver_Row_Main() function
### model_fit_params = summary_paras output of solve_SMART_Multilayer() function
### test_types = The outcomes to test
###              Potential options: "single_t" = End of Study
###                                "AUC" = Area Under Curve
###                                   (Must input t_0, t_max)
###                                "A1" = Main Effect A1
###                                "A2" = Main Effect A2
###                                "Int" = A1/A2 interaction
### t_0 = First time point
### crit_t = Critical t value (time of second decision). Default is 1
### t_max = Maximum time point
### comps = Which comparisons to run - Defaults to all 6 pairwise comparisons
###         Must be formatted as a list of two dataframes (with same number of rows)
###           Two columns in each dataframe (Correspond to (A1,A2))
###           We then run comparisons of DTR_1 vs DTR_2 with the rows of
###           comps[[1]] defining DTR_1 and the rows of comps[[2]] defining DTR_2.
###           E.g. If comps[[1]][i,]=[1,1], comps[[2]][i,]=[-1,1], then the ith
###           comparison we'd make is (1,1) vs (-1,1) (Y(1,1)-Y(-1,1))
#### Returns list of lists (outer list indexed by outcome):
####    [["contrast_mat"]] = Contrast matrix for direct input to hypothesis_testing()
####    [["labels"]] = Dataframe of labels to append to hypothesis_testing() output
Define_All_Contrasts <- function(driver_parms, model_fit_params, test_types,
t_0, crit_t, t_max, comps=NULL) {
temp_output <- NULL
for (test_type in test_types) {
temp_output[[test_type]] <- Create_Contrast_Mat(driver_parms=driver_parms,
model_fit_params=model_fit_params,
test_type=test_type, crit_t=1,
t_0=t_0,
t_max=2,
measured_t=t_max,
comps=comps)
}
Output <- temp_output
return(Output)
}
test_contrasts <- Define_All_Contrasts(driver_parms=test_driver_parms,
model_fit_params=test_iter_output,
test_types=c("single_t", "AUC"),
t_0=0,
crit_t=1,
t_max=2, comps=NULL)
View(test_contrasts)
test_contrasts[["single_t"]][["contrast_mat"]]
test_contrasts[["single_t"]][["labels"]]
test_output <- Conduct_Hypothesis_Tests(model_fit_params=test_iter_output,
contrast_output=test_contrasts,
alpha=0.05, use_t=TRUE)
# Conduct All Hypothesis Tests
### model_fit_params = summary_paras output of solve_SMART_Multilayer() function
### contrast_output = Output of Define_All_Contrasts() function
### alpha = Level of test
### use_t = Boolean indicating whether to use t-distribution
Conduct_Hypothesis_Tests <- function(model_fit_params, contrast_output,
alpha, use_t) {
temp_output <- NULL
for (test_type in names(contrast_output)) {
contrasts <- contrast_output[[test_type]][["contrast_mat"]]
temp_output[["test_type"]] <- hypothesis_testing(result=model_fit_params,
aimed_test=contrasts,
alpha=alpha,
use_t=use_t)
temp_output[["test_type"]][,c("type", "comparison")] <-
contrast_output[[test_type]][["labels"]]
}
Output <- temp_output
return(Output)
}
test_output <- Conduct_Hypothesis_Tests(model_fit_params=test_iter_output,
contrast_output=test_contrasts,
alpha=0.05, use_t=TRUE)
View(test_iter_output)
test_contrasts$single_t$contrast_mat
list.files("/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240516c/", pattern = paste0("^", prefix), all.files = TRUE)
list.files("/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240516c/", all.files = TRUE)
list.files("/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240516c/", pattern = paste0("^", "sim"), all.files = TRUE)
source("~/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/01_Programs/Functions/Simulate_and_Fit_Data.R")
split("sim_1", by="_")
str_split("sim_1", by="_")
strsplit("sim_1", split="_")
View(full_driver)
Process_Simulation_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
print(driver_row)
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Simulation_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
print(driver_row)
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Simulation_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
print(sim)
print(driver_row)
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Simulation_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
print(sim_id)
print(driver_row)
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Simulation_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")[2]
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
print(sim_id)
print(driver_row)
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Simulation_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")[[1]][2]
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
print(sim_id)
print(driver_row)
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
View(test_sim_results)
strsplit("alt_fit_1", split="fit_")
strsplit("fit_1", split="fit_")
strsplit("fit_1", split="fit_")[[1]][[2]]
Process_Driver_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")[[1]][2]
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
driver_parms <- Process_Driver_Row_Main(driver_row=driver_row)
row_fit_data <- readRDS(paste0(path, "/", sim))
for (fit in names(row_fit_data)) {
print(fit)
}
hypothesis_fit_parms <- 0
}
}
Process_Simulation_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Driver_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")[[1]][2]
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
driver_parms <- Process_Driver_Row_Main(driver_row=driver_row)
row_fit_data <- readRDS(paste0(path, "/", sim))
for (fit in names(row_fit_data)) {
print(fit)
}
hypothesis_fit_parms <- 0
}
}
Process_Driver_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
Process_Driver_Run <- function(path, test_types) {
full_driver <- readRDS(paste0(path, "/Driver"))
sims_run <- list.files(path, pattern = paste0("^", "sim"), all.files = TRUE)
for (sim in sims_run) {
sim_id <- strsplit(sim, split="_")[[1]][2]
driver_row <- full_driver[["driver"]][full_driver[["driver"]]$sim_label==sim_id,]
driver_parms <- Process_Driver_Row_Main(driver_row=driver_row)
row_fit_data <- readRDS(paste0(path, "/", sim))
for (fit in names(row_fit_data)) {
message(sim, fit)
}
hypothesis_fit_parms <- 0
}
}
Process_Driver_Run(path="/Users/gjdurham/Documents/Formal_Code/Three_Lvl_cSMART/Simulation_Study/02_Data/run_20240520a",
test_types=NULL)
